var HttpUtils   = require('./index'),
    path        = require('path'),
    uuid        = require('node-uuid'),
    http        = require('http'),
    assert      = require('assert'),
    express     = require('express'),
    bodyParser  = require('body-parser'),
    _           = require('lodash'),
    mocha       = require('mocha');

require('co-mocha');

var TEST_SERVER_PORT,GET_RESPONSE_TEXT,PUT_TEST_KEY,PUT_TEST_VALUE;

TEST_SERVER_PORT  = 3901;
GET_RESPONSE_TEXT = 'TEST RESPONSE';
PUT_TEST_KEY  = "put_test_key";
PUT_TEST_VALUE = "put_test_value";


var httpUtils = new HttpUtils({
  fileServer : '',
  dataServer : '127.0.0.1',
  dataServerPort : TEST_SERVER_PORT,
  clientId : 'admin',
  clientKey : 'admin'
});



describe('Test GET PUT POST and DELETE method',function(){

  before(function(){

    var app = express();
    app.use(bodyParser.urlencoded({ extended: false }));
    app.use(bodyParser.json());

    var router = express.Router();

    router.get('/get',function(req,res,next){
      res.status(200).send(GET_RESPONSE_TEXT);
    });

    router.post('/other',function(req,res,next){
      var body = req.body[PUT_TEST_KEY];
      var _method = req.body._method;
      if(_.toUpper(_method)=='PUT'){
        res.status(200).send(body+"PUT");
      }else if(_.toUpper(_method)=='DELETE'){
        res.status(200).send(body+"DELETE");
      }else{
        res.status(200).send(body+"POST");
      }
    });

    app.use('/',router);

    app.listen(TEST_SERVER_PORT);
  })

  it('GET',function(done){
    this.timeout(10000);
    setTimeout(function(){
      httpUtils.request('get','get').then(function(response_text){
        assert.equal(GET_RESPONSE_TEXT,response_text);
        done();
      });
    }, 1000);
  })

  it('POST',function(done){
    this.timeout(10000);
    setTimeout(function(){
      var params = {};
      params[PUT_TEST_KEY] = PUT_TEST_VALUE;
      httpUtils.request('other','post',params).then(function(response_text){
        assert.equal(PUT_TEST_VALUE+"POST",response_text);
        done();
      })
    },1000);
  })

  it('PUT',function(done){
    this.timeout(10000);
    setTimeout(function(){
      var params = {};
      params[PUT_TEST_KEY] = PUT_TEST_VALUE;
      httpUtils.request('other','put',params).then(function(response_text){
        assert.equal(PUT_TEST_VALUE+"PUT",response_text);
        done();
      })
    },1000);
  })

  it('DELETE',function(done){
    this.timeout(10000);
    setTimeout(function(){
      var params = {};
      params[PUT_TEST_KEY] = PUT_TEST_VALUE;
      httpUtils.request('other','delete',params).then(function(response_text){
        assert.equal(PUT_TEST_VALUE+"DELETE",response_text);
        done();
      })
    },1000);
  })
})




















