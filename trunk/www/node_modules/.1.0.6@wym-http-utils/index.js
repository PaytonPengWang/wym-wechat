var request = require('request'),
    fs      = require('fs'),
    path    = require('path'),
    qs      = require('querystring'),
    _       = require('lodash');
    Promise = require('bluebird');

var urlFormat = function(url,data){
    for(var key in data){
        if(url.indexOf(':'+key)!=-1){
          /* replace :key to value */
          url = _.replace(
            url,
            ':' + key,
            _.get(data , key)
          );

          /* replace {key} to value */
          url = _.replace(
            url,
            "{" + key + "key",
            _.get(data , key)
          )

          /* delete params key value */
          delete data[key];
        }
    }
    return url;
};


var _request = function(host,port,url,method,clientId,clientKey,data,callback){
    url = urlFormat(url,data);

    var options = {
        hostname : host,
        port : port,
        path : url,
        method : 'POST',
        headers : {}
    };

    data = data || {};
    data['_clientId_'] = clientId;
    data['_clientKey_'] = clientKey;

    if(_.toUpper(method)=='GET'){
        options.method = 'GET';

        if(url.indexOf('?')==-1) options.path+="?";
        else                     options.path+="&";

        options.path+=qs.stringify(data);
    }

    else if(_.toUpper(method)=='PUT')     data['_method'] = 'PUT';
    else if(_.toUpper(method)=='DELETE')  data['_method'] = 'DELETE';

    if(options.method=='get' || options.method=='GET'){
        request('http://'+host+":"+port+"/"+options.path,function(error,response,body){
            if(!error && response.statusCode == 200){
              try{
                callback(null,JSON.parse(body));
              }catch(e){
                callback(null,body);
              }
            }else{
                callback(error,null);
            }
        });
    }else{
      request.post('http://'+host+":"+port+"/"+options.path,{form:data},function(error,response,body){
          if(!error && response.statusCode == 200){
              try{
                callback(null,JSON.parse(body));
              }catch(e){
                callback(null,body);
              }
          }else{
              callback(error,null);
          };
      })
    }

};

/*
  {
    fileServer : '',
    dataServer : '',
    dataServerPort : '',
    clientId : '',
    clientKey : ''
  }
*/
var HttpUtils = function(config){
  this.config = config;
}

var requestAsync = Promise.promisify(_request);

var methods = {
    get : function(host,port,url,clientId,clientKey,data){
        return requestAsync(host,port,url,'GET',clientId,clientKey,data);
    },
    post : function(host,port,url,clientId,clientKey,data){
        return requestAsync(host,port,url,'POST',clientId,clientKey,data);
    },
    put : function(host,port,url,clientId,clientKey,data){
        return requestAsync(host,port,url,'PUT',clientId,clientKey,data);
    },
    delete : function(host,port,url,clientId,clientKey,data){
        return requestAsync(host,port,url,'DELETE',clientId,clientKey,data);
    }
};

HttpUtils.prototype.request = function(uri,method,data){
  var __self = this;
  return methods[method.toLowerCase()](__self.config.dataServer,__self.config.dataServerPort,uri,__self.config.clientId,__self.config.clientKey,data);
}
/*
  文件下载
*/
HttpUtils.prototype.downloadFile = function(fileId,targetDir,fileName){
  var __self = this;
  var targetFile = path.join(targetDir,fileName);
  return new Promise(function(resolve,reject){
      request(__self.config.fileServer+'/view/'+fileId+'.do')
      .on('response',function(response){
          if(response.statusCode==200){
          }else{
            reject();
          }
      })
      .on('end',function(a){
          resolve(targetFile);
      })
      .pipe(fs.createWriteStream(targetFile));
  })
}

/*
文件上传
*/
HttpUtils.prototype.uploadFile = function(file){
    var __self = this;
    return new Promise(function(resolve,reject){
      request.post({
          method : 'post',
          uri : __self.config.fileServer + '/upload.do?datatype=json',
          formData : {
            my_file : fs.createReadStream(file)
          }
        },function(error,response,body){
            if(error){
              reject(error);
            }
            else if(!error && response.statusCode == 200){
                resolve(JSON.parse(body).my_file.id);
            }else if(response.statusCode!==200){
                reject({statusCode : response.statusCode});
            }
        })
    })
}

HttpUtils.prototype.get = function(uri){
  return new Promise(function(resolve,reject){
    request.get(uri,function(error,response,body){
      if(!error && response.statusCode == 200){
            resolve(JSON.parse(body));
        }else{
            reject(error);
        };
    });
  })
}

module.exports = HttpUtils;
