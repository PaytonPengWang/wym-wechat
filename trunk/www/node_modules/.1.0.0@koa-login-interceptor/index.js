'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (options) {
  return regeneratorRuntime.mark(function _callee(next) {
    var ignoreUri, tokenKey, redirectUri, cache, cacheKey, iIndex, __selfQuery, token, adminInfo;

    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            /* 不进行登录拦截 */
            ignoreUri = options.ignoreUri;
            tokenKey = options.tokenKey || 'token';
            redirectUri = options.redirectUri;
            cache = options.cache;
            cacheKey = options.cacheKey;
            iIndex = 0;

          case 6:
            if (!(iIndex < ignoreUri.length)) {
              _context.next = 14;
              break;
            }

            if (!(this.originalUrl.split('?')[0] == ignoreUri[iIndex])) {
              _context.next = 11;
              break;
            }

            _context.next = 10;
            return next;

          case 10:
            return _context.abrupt('return', _context.sent);

          case 11:
            iIndex++;
            _context.next = 6;
            break;

          case 14:

            /* 获取token，优先query */
            __selfQuery = this.query;
            token = null;

            if (__selfQuery._token_) {
              this.cookies.set(tokenKey, __selfQuery._token_, {
                maxAge: 1000 * 60 * 60 * 24 * 30,
                HttpOnly: false
              });
              token = __selfQuery._token_;
            } else {
              token = this.cookies.get(tokenKey);
            }

            if (token) {
              _context.next = 19;
              break;
            }

            return _context.abrupt('return', this.redirect(redirectUri));

          case 19:
            _context.next = 21;
            return cache.getCache(token, cacheKey);

          case 21:
            adminInfo = _context.sent;

            if (adminInfo) {
              _context.next = 24;
              break;
            }

            return _context.abrupt('return', this.redirect(redirectUri));

          case 24:

            this.adminInfo = adminInfo;
            _context.next = 27;
            return next;

          case 27:
            return _context.abrupt('return', _context.sent);

          case 28:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  });
};