'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _redis = require('redis');

var _redis2 = _interopRequireDefault(_redis);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/*
  Redis客户端
*/
var RedisClient = function () {
  function RedisClient(port, host, pwd) {
    _classCallCheck(this, RedisClient);

    this.port = port;
    this.host = host;
    this.pwd = pwd;
  }

  /* 初始化配置 */


  _createClass(RedisClient, [{
    key: 'init',
    value: function init() {
      var __self = this;

      return new _bluebird2.default(function (resolve, reject) {
        __self.client = _redis2.default.createClient(__self.port, __self.host, {
          auth_pass: __self.pwd
        });

        __self.client.on('ready', function () {
          console.info('redis connection ... suucess');
          resolve(__self.client);
        });
      });
    }

    /* 获取redis客户端 */

  }, {
    key: 'getClient',
    value: function getClient() {
      if (!this.client) {
        return this.init();
      } else {
        return _bluebird2.default.resolve(this.client);
      }
    }
    // methods

  }]);

  return RedisClient;
}();

exports.default = RedisClient;