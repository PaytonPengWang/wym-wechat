'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _RedisClient = require('./lib/RedisClient');

var _RedisClient2 = _interopRequireDefault(_RedisClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Cache = function () {
  function Cache(port, host, pwd) {
    _classCallCheck(this, Cache);

    var __self = this;
    this.port = port;
    this.host = host;
    this.pwd = pwd;

    this.mapCache = {};
  }

  _createClass(Cache, [{
    key: 'getRedisClient',
    value: function getRedisClient() {
      var _this = this;

      var __self = this;
      if (__self.redisClient) {
        return Promise.resolve(__self.redisClient);
      } else {
        return new Promise(function (resolve, reject) {
          new _RedisClient2.default(_this.port, _this.host, _this.pwd).getClient().then(function (redisClient) {
            __self.redisClient = redisClient;
            resolve(redisClient);
          });
        });
      }
    }
  }, {
    key: 'serialCache',
    value: function serialCache(_id) {
      var __self = this;
      __self.getRedisClient().then(function (redisClient) {
        var cacheData = __self.mapCache[_id];
        redisClient.set(_id, JSON.stringify(cacheData));
      });
    }
  }, {
    key: 'loadCaches',
    value: function loadCaches(_id) {
      var __self = this;
      return new Promise(function (resolve, reject) {
        __self.getRedisClient().then(function (redisClient) {
          redisClient.get(_id, function (err, value) {
            if (err) {
              reject(err);
            } else {
              __self.mapCache[_id] = JSON.parse(value);
              resolve();
            }
          });
        });
      });
    }
  }, {
    key: 'getCacheScope',
    value: function getCacheScope(_id) {
      var __self = this;
      return new Promise(function (resolve, reject) {
        if (!_id) {
          resolve({});
        } else {
          __self.loadCaches(_id).then(function () {
            if (__self.mapCache[_id]) {
              resolve(__self.mapCache[_id]);
            } else {
              __self.mapCache[_id] = {};
              __self.serialCache(_id);
              resolve(__self.mapCache[_id]);
            }
          });
        }
      });
    }
  }, {
    key: 'addCache',
    value: function addCache(_Id, _Key, _Value) {
      var __self = this;
      return this.getCacheScope(_Id).then(function (_UserCacheScope) {
        _UserCacheScope[_Key] = _Value;
        __self.serialCache(_Id);
        return 0;
      });
    }
  }, {
    key: 'getCache',
    value: function getCache(_Id, _Key) {
      var __self = this;
      return __self.getCacheScope(_Id).then(function (_UserCacheScope) {
        return _UserCacheScope[_Key];
      });
    }
  }, {
    key: 'removeCache',
    value: function removeCache(_Id, _Key) {
      var __self = this;
      return __self.getCacheScope(_Id).then(function (_UserCacheScope) {
        _UserCacheScope[_Key] = null;
        __self.serialCache(_Id);
        return 0;
      });
    }
  }]);

  return Cache;
}();

exports.default = Cache;